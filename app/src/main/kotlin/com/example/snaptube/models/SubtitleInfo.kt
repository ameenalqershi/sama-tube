package com.example.snaptube.models

/**
 * نموذج معلومات الترجمة
 * يحتوي على معلومات ملفات الترجمة المتاحة للفيديو
 */
data class SubtitleInfo(
    val language: String,
    val languageCode: String,
    val name: String,
    val url: String,
    val format: String = "vtt", // vtt, srt, ass, etc.
    val isAutoGenerated: Boolean = false,
    val isDefault: Boolean = false,
    val encoding: String = "utf-8",
    val fileSize: Long = 0,
    val extension: String = "vtt"
) {
    
    /**
     * تحديد ما إذا كانت الترجمة عربية
     */
    fun isArabic(): Boolean {
        return languageCode.lowercase() in listOf("ar", "ara", "arabic") ||
                language.lowercase().contains("arabic") ||
                language.lowercase().contains("عربي")
    }
    
    /**
     * تحديد ما إذا كانت الترجمة إنجليزية
     */
    fun isEnglish(): Boolean {
        return languageCode.lowercase() in listOf("en", "eng", "english") ||
                language.lowercase().contains("english")
    }
    
    /**
     * الحصول على اسم اللغة بالعربية
     */
    fun getLocalizedLanguageName(): String {
        return when (languageCode.lowercase()) {
            "ar", "ara" -> "العربية"
            "en", "eng" -> "الإنجليزية"
            "fr", "fra" -> "الفرنسية"
            "es", "spa" -> "الإسبانية"
            "de", "deu" -> "الألمانية"
            "it", "ita" -> "الإيطالية"
            "ru", "rus" -> "الروسية"
            "ja", "jpn" -> "اليابانية"
            "ko", "kor" -> "الكورية"
            "zh", "chi" -> "الصينية"
            "pt", "por" -> "البرتغالية"
            "tr", "tur" -> "التركية"
            "hi", "hin" -> "الهندية"
            "ur", "urd" -> "الأردية"
            "fa", "per" -> "الفارسية"
            "he", "heb" -> "العبرية"
            else -> name.ifEmpty { language }
        }
    }
    
    /**
     * تحديد نوع الترجمة
     */
    fun getSubtitleType(): SubtitleType {
        return when {
            isAutoGenerated -> SubtitleType.AUTO_GENERATED
            isDefault -> SubtitleType.DEFAULT
            else -> SubtitleType.MANUAL
        }
    }
    
    /**
     * تحديد جودة الترجمة
     */
    fun getQualityLevel(): SubtitleQuality {
        return when {
            isAutoGenerated -> SubtitleQuality.AUTO
            language.contains("CC", ignoreCase = true) -> SubtitleQuality.CLOSED_CAPTION
            !isAutoGenerated -> SubtitleQuality.MANUAL
            else -> SubtitleQuality.UNKNOWN
        }
    }
    
    /**
     * الحصول على وصف الترجمة
     */
    fun getDescription(): String {
        val languageName = getLocalizedLanguageName()
        val type = when (getSubtitleType()) {
            SubtitleType.AUTO_GENERATED -> "(مولدة تلقائياً)"
            SubtitleType.DEFAULT -> "(افتراضية)"
            SubtitleType.MANUAL -> ""
        }
        
        return "$languageName $type".trim()
    }
    
    /**
     * تحديد أولوية الترجمة للعرض
     */
    fun getPriority(): Int {
        var priority = 0
        
        // أولوية عالية للعربية
        if (isArabic()) priority += 100
        
        // أولوية متوسطة للإنجليزية
        if (isEnglish()) priority += 50
        
        // أولوية للترجمة اليدوية
        if (!isAutoGenerated) priority += 20
        
        // أولوية للترجمة الافتراضية
        if (isDefault) priority += 10
        
        return priority
    }
    
    /**
     * فحص ما إذا كانت الترجمة قابلة للتحميل
     */
    fun isDownloadable(): Boolean {
        return url.isNotEmpty() && format.isNotEmpty()
    }
    
    /**
     * الحصول على اسم الملف المقترح
     */
    fun getSuggestedFileName(videoTitle: String): String {
        val cleanTitle = videoTitle
            .replace(Regex("[^a-zA-Z0-9\\s\\-_\\u0600-\\u06FF]"), "")
            .replace(Regex("\\s+"), "_")
            .take(50)
        
        val langCode = languageCode.ifEmpty { "subtitle" }
        return "${cleanTitle}_${langCode}.${extension}"
    }
    
    /**
     * تنسيق حجم الملف
     */
    fun getFormattedFileSize(): String {
        if (fileSize <= 0) return "غير معروف"
        
        return when {
            fileSize >= 1_048_576 -> "%.1f MB".format(fileSize / 1_048_576.0)
            fileSize >= 1_024 -> "%.1f KB".format(fileSize / 1_024.0)
            else -> "$fileSize B"
        }
    }
    
    /**
     * تحديد ما إذا كان التنسيق مدعوماً
     */
    fun isSupportedFormat(): Boolean {
        return format.lowercase() in listOf("vtt", "srt", "ass", "ssa", "sub", "sbv")
    }
    
    /**
     * تحويل إلى نموذج عرض مبسط
     */
    fun toDisplayModel(): SubtitleDisplayModel {
        return SubtitleDisplayModel(
            language = getLocalizedLanguageName(),
            description = getDescription(),
            type = getSubtitleType().displayName,
            quality = getQualityLevel().displayName,
            fileSize = getFormattedFileSize(),
            isRecommended = isArabic() || (isEnglish() && !isAutoGenerated),
            languageCode = languageCode,
            url = url
        )
    }
    
    companion object {
        /**
         * إنشاء ترجمة افتراضية
         */
        fun createDefault(language: String, url: String): SubtitleInfo {
            return SubtitleInfo(
                language = language,
                languageCode = detectLanguageCode(language),
                name = language,
                url = url,
                isDefault = true
            )
        }
        
        /**
         * تحديد كود اللغة من اسم اللغة
         */
        private fun detectLanguageCode(language: String): String {
            return when {
                language.contains("arabic", ignoreCase = true) || language.contains("عربي") -> "ar"
                language.contains("english", ignoreCase = true) -> "en"
                language.contains("french", ignoreCase = true) -> "fr"
                language.contains("spanish", ignoreCase = true) -> "es"
                language.contains("german", ignoreCase = true) -> "de"
                language.contains("italian", ignoreCase = true) -> "it"
                language.contains("russian", ignoreCase = true) -> "ru"
                language.contains("japanese", ignoreCase = true) -> "ja"
                language.contains("korean", ignoreCase = true) -> "ko"
                language.contains("chinese", ignoreCase = true) -> "zh"
                language.contains("portuguese", ignoreCase = true) -> "pt"
                language.contains("turkish", ignoreCase = true) -> "tr"
                language.contains("hindi", ignoreCase = true) -> "hi"
                language.contains("urdu", ignoreCase = true) -> "ur"
                language.contains("persian", ignoreCase = true) -> "fa"
                language.contains("hebrew", ignoreCase = true) -> "he"
                else -> language.take(2).lowercase()
            }
        }
        
        /**
         * ترتيب الترجمات حسب الأولوية
         */
        fun sortByPriority(subtitles: List<SubtitleInfo>): List<SubtitleInfo> {
            return subtitles.sortedByDescending { it.getPriority() }
        }
        
        /**
         * تصفية الترجمات حسب اللغة
         */
        fun filterByLanguage(subtitles: List<SubtitleInfo>, languageCode: String): List<SubtitleInfo> {
            return subtitles.filter { 
                it.languageCode.equals(languageCode, ignoreCase = true) 
            }
        }
        
        /**
         * الحصول على الترجمة الموصى بها
         */
        fun getRecommended(subtitles: List<SubtitleInfo>): SubtitleInfo? {
            // أولوية للعربية غير المولدة تلقائياً
            val arabicManual = subtitles.find { it.isArabic() && !it.isAutoGenerated }
            if (arabicManual != null) return arabicManual
            
            // ثم العربية المولدة تلقائياً
            val arabicAuto = subtitles.find { it.isArabic() }
            if (arabicAuto != null) return arabicAuto
            
            // ثم الإنجليزية غير المولدة تلقائياً
            val englishManual = subtitles.find { it.isEnglish() && !it.isAutoGenerated }
            if (englishManual != null) return englishManual
            
            // وأخيراً أي ترجمة متاحة
            return subtitles.maxByOrNull { it.getPriority() }
        }
    }
}

/**
 * أنواع الترجمة
 */
enum class SubtitleType(val displayName: String) {
    MANUAL("يدوية"),
    AUTO_GENERATED("مولدة تلقائياً"),
    DEFAULT("افتراضية")
}

/**
 * مستويات جودة الترجمة
 */
enum class SubtitleQuality(val displayName: String) {
    MANUAL("عالية الجودة"),
    CLOSED_CAPTION("مغلقة"),
    AUTO("تلقائية"),
    UNKNOWN("غير معروف")
}

/**
 * نموذج مبسط لعرض الترجمة
 */
data class SubtitleDisplayModel(
    val language: String,
    val description: String,
    val type: String,
    val quality: String,
    val fileSize: String,
    val isRecommended: Boolean,
    val languageCode: String,
    val url: String
)
